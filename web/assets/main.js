let e="";const t={view:[],delete:[],refund:[]},n=(t=e||"#app")=>document.querySelector(t).dataset.mode,a=(e,n)=>{t[e].push(n),s()};function s(n=e||"#app"){const a=document.querySelector(n);let s=a.dataset.mode||"view";a.dataset.mode=s,e=n;const c={view:document.getElementById("mode-view"),delete:document.getElementById("mode-delete"),refund:document.getElementById("mode-refund")};function r(){Object.keys(c).forEach((e=>c[e].disabled=s===e),t[s]&&t[s].forEach((e=>e())))}r(),Object.keys(c).forEach((e=>{c[e].addEventListener("click",(()=>{s=e,a.dataset.mode=s,r()}))}))}let c={};function r({description:e,text:t,enText:a,tags:s},c){const r=document.createElement("div"),o=`\n    <h3 class="card-description">${e}</h3>\n    <p class="card-text">${"ru"===c?t:a}</p>\n    <ul class="card-tags select-container">\n      ${s.map((e=>e?`<li class="select-item">${e}</li>`:"")).join("")}\n    </ul>\n  `;return e&&t?(r.classList.add("card"),r.innerHTML=o.trim(),r.onclick=e=>{const t=n();let a,s=e.target;if("view"===t||"refund"===t){if(s.classList.contains("select-item")&&(s=s.parentNode),s.classList.contains("card-text"))a=s.innerText.trim();else if(s.childNodes.length>0){const e=[...s.childNodes].filter((e=>"classList"in e&&e.classList.contains("card-text")));a=e.length>0?e[0].innerText.trim():[...s.parentNode.childNodes].filter((e=>"classList"in e&&e.classList.contains("card-text")))[0].innerText.trim()}else[...s.parentNode.childNodes].filter((e=>e.classList.contains("card-text"))),a=result[0].innerText.trim();{let e=!0;do{s.classList.contains("card")?e=!1:s=s.parentNode}while(e);s.style.borderColor="rgba(0, 100, 0, .5)",setTimeout((()=>{s.style.borderColor="transparent"}),650)}navigator.clipboard.writeText(a).then((e=>e))}},r):null}function o(e,t,n="ru"){const a=e.querySelectorAll(".column"),s=a.length;let o=0;for(const e of a)e.innerHTML="";for(const e of t){o>=s&&(o=0);r(e,n)&&(a[o].append(r(e,n)),o++)}c={container:e,cardList:t,lang:n}}document.getElementById("lang_switch").onclick=function(e){c.lang="ru"===c.lang?"en":"ru";const{container:t,cardList:n,lang:a}=c,s=document.querySelector("#app").dataset.mode,r=document.querySelector("#mode-view");document.querySelector("#search"),"delete"===s&&r.click(),t&&n&&a&&o(t,n,a)};const i=document.querySelector("#pasta-add"),d=document.querySelector("#pasta-text"),l=document.querySelector("#pasta-en-text"),u=document.querySelector("#pasta-description"),m=document.querySelector(".multi-select .select-container"),h=document.querySelector(".main .container");window.state=new class{constructor(e){this.callbacks={},this.onMethods=["add","get"],this.store=Object.assign({},e),Object.keys(e).map((e=>{this.onMethods.forEach((t=>{this.callbacks[e]?this.callbacks[e][t]=[]:this.callbacks[e]={[t]:[]}}))}))}get(e){let t;return e in this.store&&(t=this.store[e]),e in this.callbacks&&this.callbacks[e].get.forEach((n=>n(t,e,this))),t}add(e,t,n){if(e in this.store){const a=this.store[e];let s=t;t instanceof Object&&!Array.isArray(t)&&(s=Object.assign({},t)),Array.isArray(s)||(s=[s]),Array.isArray(a)&&this.store[e].push(...s),a instanceof Set&&s.forEach((t=>{this.store[e].add(t)})),e in this.callbacks&&this.callbacks[e].add.length>0&&this.callbacks[e].add.forEach((t=>{t(s,e,n,this)}))}}on(e,t,n){let a,s;"function"==typeof t&&(a=t,s=Object.keys(this.onMethods)),"string"==typeof t&&(s=[t]),n&&(a=n),s.forEach((t=>{this.callbacks[e][t].push(a)}))}}({tags:new Set,cards:new Set});{const e={text:"",enText:"",description:"",tags:[]};!function(e,t,n){const a=document.querySelector(e.container),s=document.querySelector(e.input);function c(e){const t=document.createElement("li");t.classList.add("select-item"),t.onclick=n,t.innerText=e,a.append(t)}document.querySelector(e.add).addEventListener("click",(function(){const e=s.value.trim();if(s.value="",e){const n=t(e);a.innerHTML="";for(const e of n)c(e)}}))}({container:".select-container",input:".select-input",add:".select-add"},(t=>(e.tags.push(t.toLowerCase()),e.tags=[...new Set(e.tags)],e.tags)),(({target:t})=>{const n=t.innerText.trim(),a=e.tags.indexOf(n.toLowerCase());t.style.display="none",delete e.tags[a]})),i.addEventListener("click",(()=>{state.add("cards",e),e.text="",e.enText="",e.description="",e.tags=[],u.value="",d.value="",l.value="",m.innerHTML=""})),d.addEventListener("change",(({target:t})=>{const n=t.value.trim();e.text=n})),l.addEventListener("change",(({target:t})=>{const n=t.value.trim();e.enText=n})),u.addEventListener("change",(({target:t})=>{const n=t.value.trim();e.description=n})),state.on("cards","add",(e=>{o(h,state.get("cards"))})),f="#search",p=e=>{const t=e.trim();if(t){const e=[];state.get("cards").forEach((n=>{let a=!1;Object.keys(n).find((s=>{const c=n[s];!a&&c.indexOf(t)>-1&&(e.push(n),a=!0)}))})),o(h,e)}else o(h,state.get("cards"))},document.querySelector(f).oninput=function({target:e}){const t=e.value;p(t)};window.addEventListener("resize",function e(){return h.style="",h.style.maxHeight=`${h.offsetHeight}px`,e}());s("#app"),function(){const e="refund-result",t=document.getElementById("refund-calulator"),n=document.getElementById("refund-date"),s=document.getElementById("refund-price"),c=document.getElementById("refund-pay-interval"),r=document.getElementById("refund-result"),o=document.getElementById("search"),i=document.querySelector(".main .container"),d={"янв":0,"фев":1,"мар":2,"апр":3,"май":4,"мая":4,"июн":5,"июл":6,"авг":7,"сен":8,"окт":9,"ноя":10,"дек":11,jan:0,feb:1,mar:2,apr:3,may:4,jun:5,jul:6,aug:7,sep:8,oct:9,nov:10,dec:11,"січ":0,"лют":1,"бер":2,"кві":3,"тра":4,"чер":5,"лип":6,"сер":7,"вер":8,"жов":9,"лис":10,"гру":11},l={day:1,month:30,"3-months":90,year:365};a("view",(()=>{t.style.display="none",o.disabled=!1,o.value="",setTimeout((()=>{o.oninput({target:o})}),150)})),a("delete",(()=>{t.style.display="none",o.disabled=!1,o.value="",setTimeout((()=>{o.oninput({target:o})}),150)})),a("refund",(()=>{document.querySelectorAll(".container .card"),t.style.display="block",o.value=`#{${e}}`,o.disabled=!0,setTimeout((()=>{o.oninput({target:o})}),150)})),t.addEventListener("input",(function(){i.querySelectorAll(".card .card-text").forEach((t=>{let n=t.innerHTML.replaceAll(`#{${e}}`,'<snap class="ref-res">---</span>');t.innerHTML=n}));let t="";try{t=(()=>{let e=l[c.value],t=n.value.split(" "),a=new Date(t[2],d[t[1].toLowerCase().replace(".","")],t[0]),r=s.value,o=new Date,i=a.getTime()-o.getTime(),u=Math.round(i/864e5);return Math.round(u/e*r)})()||"---"}catch(e){t="---"}r.innerHTML=t,document.querySelectorAll(".ref-res").forEach((e=>{e.innerText=t}))}))}()}var f,p;document.getElementById("update_db"),window.addEventListener("DOMContentLoaded",(async()=>await async function(){const e=await fetch("/api/db"),{tags:t,cards:n}=await e.json();state.add("cards",n,"get_db"),state.add("tags",t,"get_db")}())),state.on("cards","add",((e,t,n)=>{"get_db"!==n&&e.forEach((async e=>{const t=await fetch("/api/append_card",{method:"POST",body:JSON.stringify(e)});console.log(t.json())}))}));state.on("cards","add",(()=>{a("view",(()=>{document.querySelectorAll(".container .card").forEach((e=>{e.classList.remove("danger")}))})),a("delete",(()=>{document.querySelectorAll(".container .card").forEach((e=>{e.classList.add("danger"),e.addEventListener("dblclick",(async e=>{let t,n=e.target;if(n.classList.contains("select-item")&&(n=n.parentNode),n.classList.contains("card-text"))t=n;else if(n.childNodes.length>0){const e=[...n.childNodes].filter((e=>"classList"in e&&e.classList.contains("card-text")));t=e.length>0?e[0]:[...n.parentNode.childNodes].filter((e=>"classList"in e&&e.classList.contains("card-text")))[0]}else[...n.parentNode.childNodes].filter((e=>e.classList.contains("card-text"))),t=r[0];const a=t.parentNode.querySelector(".card-description"),s={text:t.innerHTML.trim(),description:a.innerHTML.trim()},c=await fetch("/api/delete_card",{method:"POST",body:JSON.stringify(s)});let r=await c.json();r.success&&setTimeout((function(){location.reload()}),100)}))}))}))}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
