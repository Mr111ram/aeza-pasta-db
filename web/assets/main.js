let t="";const e={view:[],delete:[]},s=(e=t||"#app")=>document.querySelector(e).dataset.mode,n=(t,s)=>{e[t].push(s),a()};function a(s=t||"#app"){const n=document.querySelector(s);let a=n.dataset.mode||"view";n.dataset.mode=a,t=s;const c={view:document.getElementById("mode-view"),delete:document.getElementById("mode-delete")};function i(){Object.keys(c).forEach((t=>c[t].disabled=a===t),e[a]&&e[a].forEach((t=>t())))}i(),Object.keys(c).forEach((t=>{c[t].addEventListener("click",(()=>{a=t,n.dataset.mode=a,i()}))}))}let c={};function i({description:t,text:e,enText:n,tags:a},c){const i=document.createElement("div"),o=`\n    <h3 class="card-description">${t}</h3>\n    <p class="card-text">${"ru"===c?e:n}</p>\n    <ul class="card-tags select-container">\n      ${a.map((t=>t?`<li class="select-item">${t}</li>`:"")).join("")}\n    </ul>\n  `;return t&&e?(i.classList.add("card"),i.innerHTML=o.trim(),i.onclick=t=>{const e=s();let n,a=t.target;if("view"===e){if(a.classList.contains("select-item")&&(a=a.parentNode),a.classList.contains("card-text"))n=a.innerText.trim();else if(a.childNodes.length>0){const t=[...a.childNodes].filter((t=>"classList"in t&&t.classList.contains("card-text")));n=t.length>0?t[0].innerText.trim():[...a.parentNode.childNodes].filter((t=>"classList"in t&&t.classList.contains("card-text")))[0].innerText.trim()}else[...a.parentNode.childNodes].filter((t=>t.classList.contains("card-text"))),n=result[0].innerText.trim();{let t=!0;do{a.classList.contains("card")?t=!1:a=a.parentNode}while(t);a.style.borderColor="rgba(0, 100, 0, .5)",setTimeout((()=>{a.style.borderColor="transparent"}),650)}navigator.clipboard.writeText(n).then((t=>t))}},i):null}function o(t,e,s="ru"){const n=t.querySelectorAll(".column"),a=n.length;let o=0;for(const t of n)t.innerHTML="";for(const t of e){o>=a&&(o=0);i(t,s)&&(n[o].append(i(t,s)),o++)}c={container:t,cardList:e,lang:s}}document.getElementById("lang_switch").onclick=function(t){c.lang="ru"===c.lang?"en":"ru";const{container:e,cardList:s,lang:n}=c;document.querySelector("#mode-view").click(),e&&s&&n&&o(e,s,n)};const r=document.querySelector("#pasta-add"),d=document.querySelector("#pasta-text"),l=document.querySelector("#pasta-en-text"),u=document.querySelector("#pasta-description"),h=document.querySelector(".multi-select .select-container"),m=document.querySelector(".main .container");window.state=new class{constructor(t){this.callbacks={},this.onMethods=["add","get"],this.store=Object.assign({},t),Object.keys(t).map((t=>{this.onMethods.forEach((e=>{this.callbacks[t]?this.callbacks[t][e]=[]:this.callbacks[t]={[e]:[]}}))}))}get(t){let e;return t in this.store&&(e=this.store[t]),t in this.callbacks&&this.callbacks[t].get.forEach((s=>s(e,t,this))),e}add(t,e,s){if(t in this.store){const n=this.store[t];let a=e;e instanceof Object&&!Array.isArray(e)&&(a=Object.assign({},e)),Array.isArray(a)||(a=[a]),Array.isArray(n)&&this.store[t].push(...a),n instanceof Set&&a.forEach((e=>{this.store[t].add(e)})),t in this.callbacks&&this.callbacks[t].add.length>0&&this.callbacks[t].add.forEach((e=>{e(a,t,s,this)}))}}on(t,e,s){let n,a;"function"==typeof e&&(n=e,a=Object.keys(this.onMethods)),"string"==typeof e&&(a=[e]),s&&(n=s),a.forEach((e=>{this.callbacks[t][e].push(n)}))}}({tags:new Set,cards:new Set});{const t={text:"",enText:"",description:"",tags:[]};!function(t,e,s){const n=document.querySelector(t.container),a=document.querySelector(t.input);function c(t){const e=document.createElement("li");e.classList.add("select-item"),e.onclick=s,e.innerText=t,n.append(e)}document.querySelector(t.add).addEventListener("click",(function(){const t=a.value.trim();if(a.value="",t){const s=e(t);n.innerHTML="";for(const t of s)c(t)}}))}({container:".select-container",input:".select-input",add:".select-add"},(e=>(t.tags.push(e.toLowerCase()),t.tags=[...new Set(t.tags)],t.tags)),(({target:e})=>{const s=e.innerText.trim(),n=t.tags.indexOf(s.toLowerCase());e.style.display="none",delete t.tags[n]})),r.addEventListener("click",(()=>{state.add("cards",t),t.text="",t.enText="",t.description="",t.tags=[],u.value="",d.value="",l.value="",h.innerHTML=""})),d.addEventListener("change",(({target:e})=>{const s=e.value.trim();t.text=s})),l.addEventListener("change",(({target:e})=>{const s=e.value.trim();t.enText=s})),u.addEventListener("change",(({target:e})=>{const s=e.value.trim();t.description=s})),state.on("cards","add",(t=>{o(m,state.get("cards"))})),g="#search",f=t=>{const e=t.trim();if(e){const t=[];state.get("cards").forEach((s=>{let n=!1;Object.keys(s).find((a=>{const c=s[a];!n&&c.indexOf(e)>-1&&(t.push(s),n=!0)}))})),o(m,t)}else o(m,state.get("cards"))},document.querySelector(g).addEventListener("input",(({target:t})=>{const e=t.value;f(e)}));window.addEventListener("resize",function t(){return m.style="",m.style.maxHeight=`${m.offsetHeight}px`,t}());a("#app")}var g,f;document.getElementById("update_db"),window.addEventListener("DOMContentLoaded",(async()=>await async function(){const t=await fetch("/api/db"),{tags:e,cards:s}=await t.json();state.add("cards",s,"get_db"),state.add("tags",e,"get_db")}())),state.on("cards","add",((t,e,s)=>{"get_db"!==s&&t.forEach((async t=>{const e=await fetch("/api/append_card",{method:"POST",body:JSON.stringify(t)});console.log(e.json())}))}));state.on("cards","add",(()=>{n("view",(()=>{document.querySelectorAll(".container .card").forEach((t=>{t.classList.remove("danger")}))})),n("delete",(()=>{document.querySelectorAll(".container .card").forEach((t=>{t.classList.add("danger"),t.addEventListener("dblclick",(async t=>{let e,s=t.target;if(s.classList.contains("select-item")&&(s=s.parentNode),s.classList.contains("card-text"))e=s;else if(s.childNodes.length>0){const t=[...s.childNodes].filter((t=>"classList"in t&&t.classList.contains("card-text")));e=t.length>0?t[0]:[...s.parentNode.childNodes].filter((t=>"classList"in t&&t.classList.contains("card-text")))[0]}else[...s.parentNode.childNodes].filter((t=>t.classList.contains("card-text"))),e=i[0];const n=e.parentNode.querySelector(".card-description"),a={text:e.innerHTML.trim(),description:n.innerHTML.trim()},c=await fetch("/api/delete_card",{method:"POST",body:JSON.stringify(a)});let i=await c.json();i.success&&setTimeout((function(){location.reload()}),100)}))}))}))}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
